# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import optparse
import sys

from openstack_requirements.cmdlib import _clone_versions
from openstack_requirements.cmdlib import _combine_freezes
from openstack_requirements.cmdlib import _freeze
from openstack_requirements.cmdlib import _make_sort_key
from openstack_requirements.cmdlib import _parse_blacklist
from openstack_requirements.cmdlib import _validate_options


def main(argv=None, stdout=None):
    parser = optparse.OptionParser()
    parser.add_option(
        "-p", dest="pythons", action="append",
        help="Specify Python versions to use when generating constraints."
             "e.g. -p /usr/bin/python3")
    parser.add_option(
        "-r", dest="requirements", help="Requirements file to process.")
    parser.add_option(
        "-b", dest="blacklist",
        help="Filename of a list of package names to exclude.")
    parser.add_option(
        "--version-map", dest='version_map', default=[], action='append',
        help=('Add a : separated list of versions to clone.  To \'clone\' '
              'a freeze generated by python3.4 to python3.5 specify 3.4:3.5.  '
              'This is intended as as a way to transition between python '
              'versions when it\'s not possible to have all versions '
              'installed'))
    options, args = parser.parse_args(argv)
    if stdout is None:
        stdout = sys.stdout
    _validate_options(options)
    freezes = [
        _freeze(options.requirements, python) for python in options.pythons]
    _clone_versions(freezes, options)
    blacklist = _parse_blacklist(options.blacklist)
    frozen = [
        *sorted(_combine_freezes(freezes, blacklist), key=_make_sort_key)]
    stdout.writelines(frozen)
    stdout.flush()
