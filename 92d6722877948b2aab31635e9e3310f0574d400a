{
  "comments": [
    {
      "key": {
        "uuid": "5a18252c_7cd5bb41",
        "filename": "openstack_requirements/cmds/update.py",
        "patchSetId": 2
      },
      "lineNbr": 149,
      "author": {
        "id": 6486
      },
      "writtenOn": "2016-04-12T19:54:39Z",
      "side": 1,
      "message": "I don\u0027t see how ref would ever have extras. I think the code should assume that ref will not have extras and will therefore always be empty.",
      "revId": "92d6722877948b2aab31635e9e3310f0574d400a",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a18252c_a6e29d01",
        "filename": "openstack_requirements/cmds/update.py",
        "patchSetId": 2
      },
      "lineNbr": 149,
      "author": {
        "id": 6482
      },
      "writtenOn": "2016-04-12T21:14:34Z",
      "side": 1,
      "message": "this sounds reasonable",
      "parentUuid": "5a18252c_7cd5bb41",
      "revId": "92d6722877948b2aab31635e9e3310f0574d400a",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a18252c_ba410e0e",
        "filename": "openstack_requirements/cmds/update.py",
        "patchSetId": 2
      },
      "lineNbr": 149,
      "author": {
        "id": 7191
      },
      "writtenOn": "2016-04-12T23:32:47Z",
      "side": 1,
      "message": "True, but in this case the comparison is [] \u003d\u003d []: which also seems fine.",
      "parentUuid": "5a18252c_a6e29d01",
      "revId": "92d6722877948b2aab31635e9e3310f0574d400a",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a18252c_9749bfd3",
        "filename": "openstack_requirements/cmds/update.py",
        "patchSetId": 2
      },
      "lineNbr": 152,
      "author": {
        "id": 4190
      },
      "writtenOn": "2016-04-12T06:44:40Z",
      "side": 1,
      "message": "I think this would be clear to just do the else block: a small comment noting that global-requirmeents doesn\u0027t specify extras, so they come from the project. Then take ref[1] for everything except extras. (The code below takes req[0].package, which is inconsistent).",
      "revId": "92d6722877948b2aab31635e9e3310f0574d400a",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a18252c_901d2076",
        "filename": "openstack_requirements/cmds/update.py",
        "patchSetId": 2
      },
      "lineNbr": 152,
      "author": {
        "id": 7191
      },
      "writtenOn": "2016-04-12T18:35:51Z",
      "side": 1,
      "message": "So i admit to cheating here a little to keep the tests working. Both version and extras are parsed into a set by pkg_resources and the original strings discarded. \n\nOrdering of a set is undefined and so half the test cases break because the string compare fails when i remove the if. \n\nFor extras i sorted() the extras set before converting to a string so at least it is stable and i guess i could do the same thing here?",
      "parentUuid": "5a18252c_9749bfd3",
      "revId": "92d6722877948b2aab31635e9e3310f0574d400a",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a18252c_e9f626d6",
        "filename": "openstack_requirements/cmds/update.py",
        "patchSetId": 2
      },
      "lineNbr": 152,
      "author": {
        "id": 4190
      },
      "writtenOn": "2016-04-12T21:43:24Z",
      "side": 1,
      "message": "From memory versions are parsed to a semantic representation with a stable output - not a plain set. Did you actually see a raft of test failures, or is this speculation?",
      "parentUuid": "5a18252c_901d2076",
      "revId": "92d6722877948b2aab31635e9e3310f0574d400a",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a18252c_3a569ed2",
        "filename": "openstack_requirements/cmds/update.py",
        "patchSetId": 2
      },
      "lineNbr": 152,
      "author": {
        "id": 7191
      },
      "writtenOn": "2016-04-12T23:32:47Z",
      "side": 1,
      "message": "I saw failures, but i went through a few ways to do this so maybe i got it wrong.",
      "parentUuid": "5a18252c_e9f626d6",
      "revId": "92d6722877948b2aab31635e9e3310f0574d400a",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a18252c_3c9d0366",
        "filename": "openstack_requirements/cmds/update.py",
        "patchSetId": 2
      },
      "lineNbr": 161,
      "author": {
        "id": 6486
      },
      "writtenOn": "2016-04-12T19:58:35Z",
      "side": 1,
      "message": "changes is just the list of changes that were made. It doesn\u0027t affect what\u0027s actually put in the requirements file. The requirements file is created from the contents of output_requirements, which is updated at line 163. That needs to be changed to use a Requirements with extras set, which isn\u0027t being done since ref[0] doesn\u0027t have extras.",
      "revId": "92d6722877948b2aab31635e9e3310f0574d400a",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a18252c_892cd24b",
        "filename": "openstack_requirements/cmds/update.py",
        "patchSetId": 2
      },
      "lineNbr": 161,
      "author": {
        "id": 4190
      },
      "writtenOn": "2016-04-12T21:43:24Z",
      "side": 1,
      "message": "Hmm - the test does look at the output_requirements semantic value, so I\u0027m not sure whats up here, but it does appear to be working - ah no, it was only passing because of the inappropriate __eq__ - once Jamie removes that and pushes it back up again, the test will be valid and the defect here caught.",
      "parentUuid": "5a18252c_3c9d0366",
      "revId": "92d6722877948b2aab31635e9e3310f0574d400a",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a18252c_3c5343e3",
        "filename": "openstack_requirements/requirement.py",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 6486
      },
      "writtenOn": "2016-04-12T19:54:39Z",
      "side": 1,
      "message": "I think it would be cleaner if there was a new function that said what it did rather than redefining __eq__ and __ne__.",
      "revId": "92d6722877948b2aab31635e9e3310f0574d400a",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a18252c_f7ec7391",
        "filename": "openstack_requirements/requirement.py",
        "patchSetId": 2
      },
      "lineNbr": 50,
      "author": {
        "id": 4190
      },
      "writtenOn": "2016-04-12T06:44:40Z",
      "side": 1,
      "message": "This is a problematic change: requirement doesn\u0027t just cover the package - its a bunch of stuff. So -1 on the __eq__ part of this change.",
      "revId": "92d6722877948b2aab31635e9e3310f0574d400a",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a18252c_7b04a514",
        "filename": "openstack_requirements/requirement.py",
        "patchSetId": 2
      },
      "lineNbr": 50,
      "author": {
        "id": 7191
      },
      "writtenOn": "2016-04-12T18:35:51Z",
      "side": 1,
      "message": "Ok - it felt weird doing it as well but i couldn\u0027t see anywhere else equality was being used. I can fix that.",
      "parentUuid": "5a18252c_f7ec7391",
      "revId": "92d6722877948b2aab31635e9e3310f0574d400a",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    }
  ]
}