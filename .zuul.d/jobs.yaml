- job:
    name: requirements-tox-babel
    parent: openstack-tox
    description: |
      Run test for requirements project.

      Uses tox with the ``babel`` environment.
    files:
      - ^babel-test/.*
      - ^tox.ini
      - ^upper-constraints.txt
    vars:
      tox_envlist: babel

- job:
    name: requirements-tox-py38-check-uc
    parent: openstack-tox-py38
    description: |
      Run test for requirements project.

      Uses tox with the ``py38-check-uc`` environment.
    files: ^upper-constraints.*txt$
    vars:
      tox_envlist: py38-check-uc
- job:
    name: requirements-tox-py39-check-uc
    parent: openstack-tox-py39
    description: |
      Run test for requirements project.

      Uses tox with the ``py39-check-uc`` environment.
    files: ^upper-constraints.*txt$
    vars:
      tox_envlist: py39-check-uc
- job:
    name: requirements-tox-py310-check-uc
    parent: openstack-tox-py310
    description: |
      Run test for requirements project.

      Uses tox with the ``py310-check-uc`` environment.
    files: ^upper-constraints.*txt$
    vars:
      tox_envlist: py310-check-uc
- job:
    name: requirements-tox-py311-check-uc
    parent: openstack-tox-py311
    description: |
      Run test for requirements project.

      Uses tox with the ``py311-check-uc`` environment.
    files: ^upper-constraints.*txt$
    vars:
      tox_envlist: py311-check-uc

- job:
    name: requirements-tox-validate-projects
    parent: openstack-tox
    files:
      - ^projects.txt
    description: |
      Run test for requirements project.

      Uses tox with the ``validate-projects`` environment.
    vars:
      tox_envlist: validate-projects

- job:
    name: requirements-tox-bindep
    parent: openstack-tox
    description: |
      Run test for requirements project.

      Uses tox with the ``bindep`` environment.
    files: ^bindep.txt$
    vars:
      tox_envlist: bindep

# NOTE(tonyb): Eventually this job will need access to the proposal_ssh_key
# secret so will need to live in project-config.  It's my understanding that
# as project-config is a trusted repo it's .impossible to speculatively
# execute jobs.  To aid job development I'm doing this in the requirements
# repo

- job:
    name: requirements-merge-constraints
    parent: base
    run: playbooks/constraints/merge.yaml
    branches: master
    attempts: 1
    timeout: 1800
    nodeset:
      nodes:
      - name: jammy
        label: ubuntu-jammy
    vars:
      requirements_dir: "{{ ansible_user_dir }}/{{ zuul.projects['opendev.org/openstack/requirements'].src_dir }}"

- job:
    name: requirements-generate-constraints-multinode
    description: |
      Generate constraints on multiple nodes and merge into a single unified constraints
      file
    parent: base
    run: playbooks/constraints/run.yaml
    branches: master
    attempts: 1
    # FIXME: This shouldn't be needed, but is added until focal and jammy jobs run at the same time (45m)
    timeout: 2700
    nodeset:
      nodes:
      - name: focal
        label: ubuntu-focal
      - name: jammy
        label: ubuntu-jammy
    host-vars:
      focal:
        python_versions:
        - "3.8"
        - "3.9"
      jammy:
        python_versions:
        - "3.10"
        - "3.11"
    vars:
      update_target: requirements-constraints
      global_requirements_file: "{{ ansible_user_dir }}/{{ zuul.projects['opendev.org/openstack/requirements'].src_dir }}/global-requirements.txt"
      artifacts_dir:  "{{ zuul_output_dir }}/artifacts"